Date: Wed, 3 Jan 2024 05:36:49 +0000 (UTC)
Message-ID: <1432341550.103.1704260209100@825850ec0edf>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_102_1670138918.1704260209099"

------=_Part_102_1670138918.1704260209099
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>8.5.4 DAE Preview: Technical Analysis</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: var(--ds-surface, #fff) !important;
        color: var(--ds-text, #000) !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: var(--ds-text, #000);
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>8.5.4 DAE Preview: Technical Analysis</h1>
    <div class=3D"Section1">
        <h2 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-Introduction">Introd=
uction</h2>
<p>Adding the ability to simulate DAE runs by inputting fake data, and mock=
ing the output actions would provide a powerful tool to developers using th=
e DAE.&nbsp;</p>
<p>It would speed up the development of DADs and would reduce errors. Users=
 will be more satisfied with RAS as a whole as a consequence of this featur=
e.&nbsp;</p>
<p>This document analyses how an implementation of this feature, also calle=
d DAD emulation, would work, and more specifically how it would work on the=
 end of the DAE.&nbsp;</p>
<h2 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-Process">Process</h2>
<p>In general, we can say that there are four possible processes in which t=
he DAE emulation (preview) service can be hosted</p>
<ol>
<li>Data Analysis Engine</li>
<li>RAS Backend</li>
<li>RAS Frontend</li>
<li>New process</li>
</ol>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-DataAnalysisEngine">Data Ana=
lysis Engine</h3>
<p>While hosting the DAE preview functionality inside of the Data Analysis =
Engine may seem obvious and simple, this isn't the case. A large amounf of =
communication is needed between the front-end and whatever component hosts =
the Data Analysis Engine emulation service. When a new run is started, the =
emulation data set needs to reach the executing process. The executing proc=
ess must also communicate progress, and must communicate the output data up=
on completion.&nbsp;</p>
<p>Concretely, this would require large amounts of writes to the database a=
nd large amounts of RabbitMQ messages between front-end and Data Analysis E=
ngine. This makes using the DAE process to host the DAE emulation service r=
ather cumbersome.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-RASBackend">RAS Backend</h3>
<p>Hosting the DAE emulation service inside of the RAS Backend is the prefe=
rred solution. We would create a reference to the DAE project, thereby usin=
g the same codebase. When the RAS backend receives a request for DAD simula=
tion, it spawns a new task that will be responsible for the execution of th=
is particular DAD emulation task. When the emulation task is complete, the =
task will end. The backend would communicate with the front-end, who initia=
lly receives the request, through REST calls.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-RASFrontend">RAS Frontend</h=
3>
<p>Hosting inside the RAS front-end is very similar to hosting inside the R=
AS backend. The main difference being a conceptual one (loading the front-e=
nd server with such a heavy task seems inappropriate). It would also reduce=
 the amount of REST communication that is needed, as everything would happe=
n inside the front-end.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-NewProcess">New Process</h3>
<p>Hosting the DAD emulation service inside a new process is technically al=
so a possibility. The disadvantage here is that there would be another proc=
ess to manage, another process to insure stays running, another process to =
integrate into CI, another task to create on all environments, etcetera.&nb=
sp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-Conclusion">Conclusion</h3>
<p>RAS Backend is the best location to perform DAD run simulation.&nbsp;</p=
>
<h2 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-Functioning">Functioning</h2=
>
<p>DAD emulation would be performed by instantiating an object of type RASQ=
LStatementExecutor. The constructor for this class currently takes the foll=
owing arguments:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">   publ=
ic RASQLStatementExecutor(
            ILogFactory logFactory,
            IExecutionEngineFactory executionEngineFactory,
            IAssetService assetService,
            IAssetTypePropertyService assetTypePropertyService,
            IFactory&lt;IActionExecutor&gt; actionExecutorFactory)</pre>=20
</div>
</div>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-ILogFactorylogFactory">ILogF=
actory logFactory</h3>
<p>Either mocked out to record it's output, or a genuine Log4net logfactory=
 that produces loggers which can also relay their logged output to some oth=
er process.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-IExecutionEngineFactoryexecu=
tionEngineFactory">IExecutionEngineFactory executionEngineFactory</h3>
<p>This parameter is a factory which creates either EveryRecordEngine's or =
SchedulerRecordEngines. Use a modified ExecutionEngineFactory, that reads f=
rom simulated data rather than from the database.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-IAssetServiceassetService">I=
AssetService assetService</h3>
<p>This parameter is used to confirm the existence &amp; permissions requir=
ed of assets. Can be the genuine one.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-IAssetTypePropertyServiceass=
etTypePropertyService">IAssetTypePropertyService assetTypePropertyService</=
h3>
<p>This parameter is used to confirm the existence required for asset type =
properties used in the RASQL statements. Use the genuine one.&nbsp;</p>
<h3 id=3D"id-8.5.4DAEPreview:TechnicalAnalysis-IFactory<IActionExecutor>act=
ionExecutorFactory">IFactory&lt;IActionExecutor&gt; actionExecutorFactory</=
h3>
<p>This one's the big one. Create a second implementation that returns an a=
lternate implementation for every available actionExecutor. Every executor =
should store their operations to memory rather than actually executing them=
. Keep references to the objects that were created by the alternate factory=
, as you'll need to retrieve their data to show the preview result.&nbsp;</=
p>
<p><br></p>
    </div>
</body>
</html>
------=_Part_102_1670138918.1704260209099--
