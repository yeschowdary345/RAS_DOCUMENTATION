Date: Wed, 3 Jan 2024 05:42:06 +0000 (UTC)
Message-ID: <1133091678.95.1704260526940@19aa8add6f59>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_94_1298404018.1704260526940"

------=_Part_94_1298404018.1704260526940
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>17.2 Asset Types &amp; Hierarchies</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: var(--ds-surface, #fff) !important;
        color: var(--ds-text, #000) !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: var(--ds-text, #000);
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>17.2 Asset Types &amp; Hierarchies</h1>
    <div class=3D"Section1">
        <h2 id=3D"id-17.2AssetTypes&amp;Hierarchies-Introduction">Introduct=
ion</h2>
<p>In the original version of RAS, as it was decided that we were to have a=
 hierarchy of asset types. Each asset would have a corresponding asset type=
, and that asset type would inherit from its parent asset types all the way=
 to the top of hierarchy.&nbsp;</p>
<p>We have found a number of issues with this solution:</p>
<ul style=3D"list-style-type: square;">
<li>Asset type pollution: if one asset sends a value for an unknown asset p=
roperty, this asset property is automatically created at the lowest level i=
n the asset type hierarchy. However, other devices will also have the same =
asset type, so this pollution is not limited to the asset that made the mis=
take.&nbsp;</li>
<li>Asset property duplication: Because each layer in the asset type hierar=
chy contains property definitions, we can have multiple instances of the sa=
me property for the same asset, an insane situation.&nbsp;</li>
<li>Having to create a new asset type for almost each asset: Although the i=
nitial thought was we could create generic asset types and reuse them, in r=
eality we almost always need to create a new asset type when a new asset is=
 created.&nbsp;</li>
<li>When assets have differing asset types (because of reasons outlined abo=
ve) their properties in e.g. filters are not combined even though they may =
be the same (eg 2 different ASSETNAME properties in step 2 of filter creati=
on).&nbsp;</li>
</ul>
<h2 id=3D"id-17.2AssetTypes&amp;Hierarchies-IssueConclusion">Issue Conclusi=
on</h2>
<p>Currently, asset types are interwoven with the data model, while they ar=
e merely used as metadata for the asset. It would be possible and preferabl=
e to use asset types only as an attribute, rather than using asset types as=
 the reference for our property management system.&nbsp;</p>
<h2 id=3D"id-17.2AssetTypes&amp;Hierarchies-Proposal">Proposal</h2>
<p>We recommend attaching properties to the asset, rather than attaching th=
em to the asset type. When an asset without any associated properties recei=
ves data, properties are automatically generated based on the data, and ass=
ociated to the asset.&nbsp;</p>
<p>We will provide user interface that allows administrators to adjust the =
metadata for these asset properties. That same administrator has the option=
 to copy all of the asset property metadata from one asset to other assets.=
 If, in a copy operation, a target asset already has an associated property=
 with the same property name, the existing asset property is overwritten ra=
ther than creating a new asset property. Because property definitions are c=
hanged, rather than removed &amp; recreated, all existing asset values for =
the target asset remain valid and do not need to be rewritten.&nbsp;</p>
<p>If, in a copy operation, the target operation does not have the same ass=
et property type (meaning the source asset property is of type float and th=
e target of type string, or the other way around), the copy operation fails=
. A data rewrite would be necessary if we were to support this.&nbsp;</p>
<p>It will also be possible to copy a single asset property to one or more =
assets. Consequently, when new firmware is released to multiple assets, add=
ing a few parameters to each of them, the administrator only needs to confi=
gure the asset property metadata once, and copy it to all relevant assets.&=
nbsp;</p>
<p>When an asset property is created by the preprocessor based on received =
data, it is marked in the user interface as being "unconfirmed" using an ic=
on. This will make it easier for administrators to see which properties hav=
e not been thoroughly configured, and allow them to do so. The first time a=
n asset property is explicitly changed from the user interface, the "unconf=
irmed" flag is cleared. When asset properties are copied, the asset propert=
ies on the receiving end are naturally also set to "confirmed".&nbsp;</p>
<p>When changing the unit in asset property metadata, either explicitly thr=
ough the interface or implicitly by copying properties from another asset, =
the system checks if these properties are currently being used in filters. =
If they are, show a warning that explains how units are an essential part o=
f how properties are displayed in dashboards &amp; reports, and that changi=
ng them will break dashboards &amp; reports. The dashboards and reports tha=
t will be broken should be listed, including the username of the owner.&nbs=
p;</p>
<p>When a user is creating a new filter, the properties that are shown in s=
tep 2 of the filter creation wizard are grouped by the combination of their=
 property names and their units. This means that if the user selected two a=
ssets in step 1 of the filter creation wizard, both having properties with =
the same property name, but differing units, that two entries will be shown=
 for these two asset properties in step 2. It's only logical that two prope=
rties with different units are split in the resulting data set: the user sh=
ould have the possibility of showing these on different axes as their scale=
s would probably be completely different.&nbsp;</p>
<p>When a filter is saved, the selected properties are decompressed and sto=
red in their decompressed state. The system determines the list of selected=
 asset properties for each asset, and writes the list of (asset, propertyid=
) entries to the database for this filter.&nbsp;</p>
<p>Similarly, when the second step of a filter is shown, the list of proper=
ties that is shown is compressed: grouping according to the rules specified=
 above is performed, and the relevant boxes are shown checked.&nbsp;</p>
<p>This system of compression and decompression allows properties to change=
 while filters stay functional as much as possible.&nbsp;</p>
<p>In the data analysis engine, no changes are needed as already refer to s=
ome specific asset's property in the WITH and DEFINE clauses.&nbsp;</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
    </div>
</body>
</html>
------=_Part_94_1298404018.1704260526940--
